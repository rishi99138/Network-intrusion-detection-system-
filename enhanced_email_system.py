import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import json
import os
from datetime import datetime

class EnhancedEmailSystem:
    def __init__(self, config):
        self.config = config
        self.enabled = config.get('enabled', False)
        self.last_email_time = {}  # Rate limiting
        self.email_rate_limit = 300  # Maximum 1 email per 5 minutes per alert type
        
    def should_send_email(self, alert_type):
        """Rate limiting to prevent email spam"""
        now = datetime.now()
        
        if alert_type in self.last_email_time:
            time_diff = (now - self.last_email_time[alert_type]).seconds
            if time_diff < self.email_rate_limit:
                return False
        
        self.last_email_time[alert_type] = now
        return True
    
    def create_email_content(self, alert, location_info=None):
        """Create detailed email content"""
        subject = f"üö® NIDS Alert: {alert['severity']} - {alert['type']}"
        
        # HTML email template
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: {'#ff4444' if alert['severity'] == 'HIGH' else '#ffaa44' if alert['severity'] == 'MEDIUM' else '#4444ff'}; 
                          color: white; padding: 15px; border-radius: 5px; }}
                .content {{ background-color: #f9f9f9; padding: 20px; margin: 10px 0; border-radius: 5px; }}
                .detail {{ margin: 10px 0; }}
                .footer {{ font-size: 12px; color: #666; margin-top: 20px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>üõ°Ô∏è Network Intrusion Detection Alert</h2>
                <h3>{alert['type']} - {alert['severity']} Severity</h3>
            </div>
            
            <div class="content">
                <div class="detail"><strong>‚è∞ Detection Time:</strong> {alert['timestamp']}</div>
                <div class="detail"><strong>üåê Source IP:</strong> {alert['source_ip']}</div>
                <div class="detail"><strong>üéØ Target IP:</strong> {alert['destination_ip']}</div>
                <div class="detail"><strong>üìù Description:</strong> {alert['description']}</div>
        """
        
        # Add location information if available
        if location_info:
            html_content += f"""
                <div class="detail"><strong>üìç Source Location:</strong> 
                    {location_info['location']['city']}, {location_info['location']['country']} 
                    (ISP: {location_info['location']['isp']})
                </div>
                <div class="detail"><strong>‚ö†Ô∏è Threat Assessment:</strong> {location_info['threat_level']}</div>
            """
        
        # Add payload information if available
        if 'payload_sample' in alert:
            html_content += f"""
                <div class="detail"><strong>üîç Payload Sample:</strong> 
                    <pre style="background: #eee; padding: 10px; font-size: 12px;">{alert['payload_sample']}</pre>
                </div>
            """
        
        html_content += """
            </div>
            
            <div class="footer">
                <p>This alert was generated by your Network Intrusion Detection System (NIDS).</p>
                <p>Please investigate this activity and take appropriate security measures if necessary.</p>
            </div>
        </body>
        </html>
        """
        
        return subject, html_content
    
    def send_email_alert(self, alert, location_info=None):
        """Send enhanced email alert"""
        if not self.enabled or not self.should_send_email(alert['type']):
            return False
        
        try:
            # Create email content
            subject, html_content = self.create_email_content(alert, location_info)
            
            # Setup email
            msg = MIMEMultipart('alternative')
            msg['From'] = self.config['from_email']
            msg['To'] = self.config['to_email']
            msg['Subject'] = subject
            
            # Add HTML content
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)
            
            # Connect and send
            context = ssl.create_default_context()
            with smtplib.SMTP(self.config['smtp_server'], self.config['smtp_port']) as server:
                server.starttls(context=context)
                server.login(self.config['from_email'], self.config['password'])
                server.send_message(msg)
            
            print(f"üìß Email alert sent: {alert['type']}")
            return True
            
        except Exception as e:
            print(f"‚ùå Email send failed: {e}")
            return False
